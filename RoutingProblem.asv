function [ bestsol, bestfit] = RoutingProblem( depot, distance, mass, num, capacity )
    tic
%ROUTINGPROBLEM Summary of this function goes here
%   Detailed explanation goes here
%   depot - distance between customer and depot
%   distance - distances between each customer
%   mass - weight of each package for each customer
%   num - number of cars
%   capacity - capacity per car

% set globals

    global gdepot
    global gdistance
    global gmass
    global gnum
    global gcapacity
    global len
    global c
    gdepot = depot;
    gdistance = distance;
    gmass = mass;
    gnum = num;
    gcapacity = capacity;
    len = length(depot)+num-1;
    c = 1.5;
    swarmLIMIT = 100;
    bestfit = [];

    % check to see if the mass is too large for the number of cars

    if (sum(mass) > num * capacity)
        msgID = 'MYFUN:TooMuchMass';
        msg = 'Not enough cars for capacity.';
        baseException = MException(msgID,msg);
        throw(baseException);
    end
    
    % Generate first particle

    swarm = cell(1,1);
    swarm{1} = cell(1,1);
    swarm{1}{1} = Particle();
    
    % set gbest to the first particle
    
    tbest = cell(1,1);
    tbest{1} = swarm{1}{1};
    gbest = swarm{1}{1};
    
    % termination condition is set below to run until maxIters
    condition = 1;
    maxIters = 500;
    iters = 1;
    while condition
        % r is the threshold to determine if a tribe is bad or good
        r = rand(1);
        i = 1;
        while i <= length(swarm)
            nexttbest = tbest{i};
            worstfit = tbest{i};
            good = 0;
            worstfitindex= [];
            for j = 1:length(swarm{i})
                swarm{i}{j} = swarm{i}{j}.Next(tbest{i});
                if swarm{i}{j}.fitness < nexttbest.fitness
                    nexttbest = swarm{i}{j};
                    if swarm{i}{j}.fitness < gbest.fitness
                        gbest = swarm{i}{j};
                    end
                elseif swarm{i}{j}.fitness > worstfit.fitness
                    worstfitindex = j;
                    worstfit = swarm{i}{j};
                end
                if swarm{i}{j}.progress == 1
                    good = good + 1;
                end
            end
            tbest{i} = nexttbest;
            %if the current tribe is bad, add a particle into the new tribe
            if r > good/(length(swarm{i})) && length(swarm) < swarmLIMIT
                newtribe = length(swarm)+1;
                %if there is no new tribe, create it
                if length(swarm) < newtribe
                    swarm{newtribe} = cell(1);
                    %the solution of the particle is the best solution of
                    %the tribe
                    swarm{newtribe}{end} = Particle(tbest{i}.sol);
                    tbest{newtribe} = swarm{newtribe}{end};
                %else if the new tribe exists add the new particle into the 
                %new tribe
                else
                    swarm{newtribe}{end+1} = Particle(tbest{i}.sol);
                    if swarm{newtribe}{end}.fitness < tbest{newtribe}.fitness
                        tbest{newtribe} = swarm{newtribe}{end};
                    end
                end
            %if the current tribe is good, then delete its worst parti
            elseif r < good/(length(swarm{i})) && length(swarm) > 1 && ~isempty(worstfitindex)
                swarm{i}(worstfitindex) = [];
                if isempty(swarm{i})
                    swarm(i) = [];
                end
            elseif length(swarm{i}) == 1 && ~(length(swarm) == 1) && ~isempty(worstfitindex)
                if i == 1 && swarm{i+1}{1}.fitness < swarm{i}{worstfitindex}.fitness 
                    swarm(i) = [];
                    tbest(i) = [];
                elseif ~(i == 1)
                    if swarm{i-1}{1}.fitness < swarm{i}{worstfitindex}.fitness
                    swarm(i) = [];
                    tbest(i) = [];
                    end
                end
            end
            i = i+1;
        end
        iters = iters + 1;
        if iters > maxIters;
            condition = 0;
        end
        %bestfit = cat(1,bestfit,gbest.fitness);
    end
    bestsol = gbest.sol;
    bestfit = gbest.fitness;
    toc
end

